name: Terraform Apply

on: workflow_dispatch

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1


      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # Checks that all Terraform configuration files adhere to a canonical format
      #    - name: Terraform Format
      #      run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
          TF_VAR_container_image: ${{ secrets.CONTAINER_IMAGE }}
          TF_VAR_sql_instance: ${{ secrets.SQL_INSTANCE }}
          TF_VAR_secret_django_secret: ${{ secrets.SECRET_DJANGO_SECRET }}
          TF_VAR_secret_database_name: ${{ secrets.SECRET_DATABASE_NAME }}
          TF_VAR_secret_database_password: ${{ secrets.SECRET_DATABASE_PASSWORD }}
          TF_VAR_secret_database_host: ${{ secrets.SECRET_DATABASE_HOST }}
          TF_VAR_secret_firebase_cert_url: ${{ secrets.SECRET_FIREBASE_CERT_URL }}
          TF_VAR_secret_firebase_client_email: ${{ secrets.SECRET_FIREBASE_CLIENT_EMAIL }}
          TF_VAR_secret_firebase_client_id: ${{ secrets.SECRET_FIREBASE_CLIENT_ID }}
          TF_VAR_secret_firebase_private_key: ${{ secrets.SECRET_FIREBASE_PRIVATE_KEY }}
          TF_VAR_secret_firebase_private_key_id: ${{ secrets.SECRET_FIREBASE_PRIVATE_KEY_ID }}
          TF_VAR_secret_firebase_project_id: ${{ secrets.SECRET_FIREBASE_PROJECT_ID }}

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
